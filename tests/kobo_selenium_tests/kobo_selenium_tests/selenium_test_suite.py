'''
Created on Oct 31, 2014

@author: esmail
'''

from __future__ import absolute_import
import unittest
import os
import time
import logging

from selenium import webdriver
from selenium.webdriver.common.by import By

from .selenium_ide_exported import empty_test
from .edited_test_cases import initial_login_test_edited
from .edited_test_cases import create_form_test_edited
from .edited_test_cases import preview_form_test_edited
from .selenium_ide_exported import export_xls_test
from .selenium_ide_exported import delete_form_test
from .edited_test_cases import upload_xls_test_edited
from .selenium_ide_exported import deploy_form_test
from .edited_test_cases import enter_data_test_edited
from .selenium_ide_exported import download_entered_data_test
from .selenium_ide_exported import delete_project_test
from .selenium_ide_exported import verify_no_projects_test
from .selenium_ide_exported import verify_no_forms_test
from .selenium_ide_exported import logout_test


# Inherit some helper functions automatically generated by Selenium IDE.
class Test_Selenium(empty_test.EmptyTest):

    DEFAULT_WAIT_SECONDS= 10
    MAX_SUITE_TIME_MINUTES= 10
    timed_out= False

    def check_timeout(self, status_message=''):
        minutes_elapsed= (time.time() - self.suite_start_time) / 60
        if minutes_elapsed >= self.MAX_SUITE_TIME_MINUTES:
            self.timed_out= True
            raise Exception('Test suite timed out: ' + status_message)

    # Don't use the inherited, automatically-generated setup and teardown methods.
    def setUp(self):
        self.check_timeout()

    def tearDown(self):
        pass


    @classmethod
    def setUpClass(cls):
        # Set up the Firefox instance to automatically download XLS files.
        # Copied from http://stackoverflow.com/a/18440478/1877326.
        # To prevent download dialog
        profile = webdriver.FirefoxProfile()
        profile.set_preference('browser.download.folderList', 2) # custom location
        profile.set_preference('browser.download.manager.showWhenStarting', False)
        profile.set_preference('browser.download.dir', '/tmp')
        profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        # http://stackoverflow.com/a/15400334/1877326
        # Disable debug logging.
        selenium_logger = logging.getLogger('selenium.webdriver.remote.remote_connection')
        # Only display possible problems
        selenium_logger.setLevel(logging.WARN)

        cls.driver = webdriver.Firefox(profile)
        cls.driver.implicitly_wait(30)
        cls.driver.maximize_window()
        cls.verificationErrors = []
        cls.accept_next_alert = True

        cls.suite_start_time= time.time()

    @classmethod
    def tearDownClass(cls):
        # Clean up the downloaded XLS file if the test got that far.
        if os.path.isfile('/tmp/Selenium_test_form_title.xls'):
            os.remove('/tmp/Selenium_test_form_title.xls')
        cls.driver.quit()
#         self.assertEqual([], self.verificationErrors)

    # TODO: Delete "selenium" user and associated data from DB after testing.


    # Record the base URLs to use for KoBoForm and KoBoCAT
    KOBOFORM_URL= os.environ.get('KOBOFORM_URL', 'http://kf.kobotoolbox.org/')
    KOBOCAT_URL= os.environ.get('KOBOCAT_URL', 'http://kc.kobotoolbox.org/')

#     # SCIENCE!!! Want to automatically generate test methods, but it seems like it will require 'metaclass' magic... http://stackoverflow.com/a/13579703/1877326
#     # Tuples of the step number, base URL for the step, Selenium 'TestCase' subclass, and test method.
#     test_tuples = [
#         (2,
#          KOBOFORM_URL,
#          initial_login_test_edited.InitialLoginTestTemplate,
#          initial_login_test_edited.InitialLoginTestTemplate.test_initial_login_test_template
#         ),
#
#         (3,
#          KOBOFORM_URL,
#          create_form_test_edited.CreateFormTestTemplate,
#          create_form_test_edited.CreateFormTestTemplate.test_create_form_test_template
#         ),
#
#          # TODO: Address 'iframe' issues and re-activate this test.
# #         ('step_04',
# #          KOBOFORM_URL,
# #          preview_form_test_edited.PreviewFormTestTemplate,
# #          preview_form_test_edited.PreviewFormTestTemplate.test_preview_form_test_template
# #         ),
#
#         (5,
#          KOBOFORM_URL,
#          export_xls_test.ExportXlsTest,
#          export_xls_test.ExportXlsTest.test_export_xls
#         ),
#
#         # TODO: Test that the file was indeed (newly) exported and can be read by 'pyxform'.
#
#         (6,
#          KOBOFORM_URL,
#          delete_form_test.DeleteFormTest,
#          delete_form_test.DeleteFormTest.test_delete_form
#         ),
#
#         (7,
#          KOBOFORM_URL,
#          upload_xls_test_edited.UploadXlsTestTemplate,
#          upload_xls_test_edited.UploadXlsTestTemplate.test_upload_xls_test_template
#         ),
#
#         (8,
#          KOBOFORM_URL,
#          deploy_form_test.DeployFormTest,
#          deploy_form_test.DeployFormTest.test_deploy_form
#         ),
#
#         (9,
#          KOBOCAT_URL,
#          enter_data_test.EnterDataTest,
#          enter_data_test.EnterDataTest.test_enter_data
#         ),
#
#         (10,
#          KOBOCAT_URL,
#          download_entered_data_test.DownloadEnteredDataTest,
#          download_entered_data_test.DownloadEnteredDataTest.test_download_entered_data
#         ),
#
#         (11,
#          KOBOCAT_URL,
#          delete_project_test.DeleteProjectTest,
#          delete_project_test.DeleteProjectTest.test_delete_project
#         ),
#
#         # Step 12 implemented manually below.
#
#         (13,
#          KOBOCAT_URL,
#          logout_test.LogoutTest,
#          logout_test.LogoutTest.test_logout
#         ),
#     ]


    def delete_all_forms(self):
        # Open the page and wait for it to load.
        self.driver.get(self.KOBOFORM_URL)
        for _ in range(60):
            try:
                if self.is_element_present(By.CSS_SELECTOR, ".forms-header__title"): break
            except: pass
            time.sleep(1)
        else: self.fail("time out")

        # Wait for the forms list or lack thereof to load.
        form_cards= []
        for _ in range(60):
            try:
                if self.is_element_present(By.CSS_SELECTOR, ".info-list"):
                    form_cards= self.driver.find_elements_by_css_selector(".info-list .forms__card")
                    break
            except: pass
            try:
                if self.is_element_present(By.CSS_SELECTOR, ".container.empty") \
                  and not self.is_element_present(By.CSS_SELECTOR, ".ng-hide .container.empty"): break
            except: pass
            time.sleep(1)

        # Run through form deletion once for each form detected (not infinite scroll compatible).
        for _ in xrange(len(form_cards)):
            # Is calling a function defined below considered bad form?
            self.test_step_08_delete_form()


    def delete_all_projects(self):
        # Open the page and wait for it to load.
        self.driver.get(self.KOBOCAT_URL)
        for _ in range(60):
            try:
                if self.is_element_present(By.CSS_SELECTOR, ".projects__advanced"): break
            except: pass
            time.sleep(1)
        else: self.fail("time out")

        # Wait for the projects list or lack thereof to load.
        project_rows= []
        for _ in range(60):
            try:
                if self.is_element_present(By.CSS_SELECTOR, ".published_forms__table"):
                    project_rows= self.driver.find_elements_by_css_selector(".published_forms__table tr.published_forms__form")
                    break
                else:
                    break
            except: pass

        # Run through project deletion once for each project detected (not infinite scroll compatible).
        for _ in xrange(len(project_rows)):
            # Is calling a function defined below considered bad form?
            self.test_step_14_delete_project_test()


    # Test steps.

    # TODO: Intercept the generated registration e-mail to a file and test the supplied link.
#     def test_step_01_register_user(self):
#         # KoBoForm test.
#         self.base_url= KOBOFORM_URL
#         register_user_test.RegisterUserTest.test_register_user(self)
#         raise NotImplementedError


    def test_step_02_initial_login(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= initial_login_test_edited.InitialLoginTestTemplate
        test_method_name= test_case_class.test_initial_login_test_template.__name__
        test_case_class.__dict__[test_method_name](self)


    def test_step_03_delete_all_forms(self):
        self.delete_all_forms()


    def test_step_04_delete_all_projects(self):
        self.delete_all_projects()


    def test_step_05_create_form(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= create_form_test_edited.CreateFormTestTemplate
        test_method_name= test_case_class.test_create_form_test_template.__name__
        test_case_class.__dict__[test_method_name](self)


    # FIXME: Make a separate test for Enketo Express and receive an indication
    #         via environment variable as to which to test against.
    def test_step_06_preview_created_form_kf(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= preview_form_test_edited.PreviewFormTestTemplate
        test_method_name= test_case_class.test_preview_form_test_template.__name__
        test_case_class.__dict__[test_method_name](self)


    def test_step_07_export_xls(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= export_xls_test.ExportXlsTest
        test_method_name= test_case_class.test_export_xls.__name__
        test_case_class.__dict__[test_method_name](self)

        # TODO: Test that the file was indeed (newly) exported and can be read by 'pyxform'.


    def test_step_08_delete_form(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= delete_form_test.DeleteFormTest
        test_method_name= test_case_class.test_delete_form.__name__
        test_case_class.__dict__[test_method_name](self)


    def test_step_09_upload_xls(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= upload_xls_test_edited.UploadXlsTestTemplate
        test_method_name= test_case_class.test_upload_xls_test_template.__name__
        test_case_class.__dict__[test_method_name](self)


    def test_step_10_preview_imported_form_kf(self):
        self.test_step_06_preview_created_form_kf()


    def test_step_11_deploy_form(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= deploy_form_test.DeployFormTest
        test_method_name= test_case_class.test_deploy_form.__name__
        test_case_class.__dict__[test_method_name](self)


    # FIXME: Make a separate test for Enketo Express and receive an indication
    #         via environment variable as to which to test against.
    def test_step_12_enter_data(self):
        # KoBoCAT test.
        self.base_url= self.KOBOCAT_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= enter_data_test_edited.EnterDataTestEdited
        test_method_name= test_case_class.test_enter_data_test_edited.__name__
        test_case_class.__dict__[test_method_name](self)


    def test_step_13_download_entered_data(self):
        # KoBoCAT test.
        self.base_url= self.KOBOCAT_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= download_entered_data_test.DownloadEnteredDataTest
        test_method_name= test_case_class.test_download_entered_data.__name__
        test_case_class.__dict__[test_method_name](self)


    # Cleanup steps.

    def test_step_14_delete_project_test(self):
        # KoBoCAT test.
        self.base_url= self.KOBOCAT_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= delete_project_test.DeleteProjectTest
        test_method_name= test_case_class.test_delete_project.__name__
        test_case_class.__dict__[test_method_name](self)


    def test_step_15_verify_no_projects(self):
        # KoBoCAT test.
        self.base_url= self.KOBOCAT_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= verify_no_projects_test.VerifyNoProjectsTest
        test_method_name= test_case_class.test_verify_no_projects.__name__
        test_case_class.__dict__[test_method_name](self)


    def test_step_16_delete_form_test(self):
        self.test_step_08_delete_form()


    def test_step_17_verify_no_forms(self):
        # KoBoFrom test.
        self.base_url= self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= verify_no_forms_test.VerifyNoFormsTest
        test_method_name= test_case_class.test_verify_no_forms.__name__
        test_case_class.__dict__[test_method_name](self)


    def test_step_18_logout(self):
        # KoBoCAT test.
        self.base_url= self.KOBOCAT_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= logout_test.LogoutTest
        test_method_name= test_case_class.test_logout.__name__
        test_case_class.__dict__[test_method_name](self)


if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()